{{define "decodeMap"}}
func (x {{CamelCase .FullName}}Map) decode(d *polyglot.Decoder, size uint32) error {
    if size == 0 {
        return nil
    }
    var k {{ FindValue .MapKey }}
    {{ if eq .MapKey.Kind 14 -}} {{/* protoreflect.EnumKind */ -}}
        var {{ CamelCase .MapKey.Name }}Temp uint32
    {{end -}}
    var v {{ FindValue .MapValue }}
    {{ if eq .MapValue.Kind 14 -}} {{/* protoreflect.EnumKind */ -}}
    var {{ CamelCaseName .MapValue.Name }}Temp uint32
    {{end -}}
    var err error
    for i := uint32(0); i < size; i++ {
        {{ $keyDecoder := GetLUTDecoder .MapKey.Kind -}}
        {{ if and (eq $keyDecoder "") (eq .MapKey.Kind 11) -}} {{/* protoreflect.MessageKind */ -}}
        k = New{{ CamelCase .MapKey.Message.FullName }}()
        err = k.decode(d)
        {{else -}}
            {{ if eq .MapKey.Kind 14 -}}  {{/* protoreflect.EnumKind */ -}}
            {{ CamelCase .MapKey.Name }}Temp, err = d{{$keyDecoder}}()
                k = {{ FindValue .MapKey }}({{ CamelCase .MapKey.Name }}Temp)
            {{else -}}
                k, err = d{{$keyDecoder}}()
            {{end -}}
        {{end -}}
        if err != nil {
            return err
        }
        {{ $valDecoder := GetLUTDecoder .MapValue.Kind -}}
        {{ if and (eq $valDecoder "") (eq .MapValue.Kind 11) -}} {{/* protoreflect.MessageKind */ -}}
        v = New{{ CamelCase .MapValue.Message.FullName }}()
        err = v.decode(d)
        {{else -}}
            {{ if eq .MapValue.Kind 14 -}} {{/* protoreflect.EnumKind */ -}}
                {{CamelCaseName .MapValue.Name}}Temp, err = d{{$valDecoder}}()
                v = {{ FindValue .MapValue }}({{ CamelCaseName .MapValue.Name }}Temp)
            {{else -}}
                v, err = d{{$valDecoder}}()
            {{end -}}
        {{end -}}

        if err != nil {
            return err
        }
        x[k] = v
    }
    return nil
}
{{end}}