{{define "encode"}}
func (x *{{ CamelCase .FullName }}) Encode (b *polyglot.Buffer) {
    if x == nil {
        polyglot.Encoder(b).Nil()
    } else {
        {{ CustomEncode }}
        {{ $encoding := GetEncodingFields .Fields -}}
        {{ if $encoding.Values -}}
            polyglot.Encoder(b){{ range $val := $encoding.Values -}}{{ $val -}}{{end -}}
        {{ end -}}
        {{ if $encoding.SliceFields -}}
            {{template "encodeSlices" $encoding -}}
        {{end -}}
        {{ if $encoding.MessageFields -}}
        {{template "encodeMessages" $encoding -}}
        {{end -}}
    }
}
{{end}}

{{define "encodeSlices"}}
    {{ range $field := .SliceFields -}}
        {{ $encoder := GetLUTEncoder $field.Kind -}}
        {{ if and (eq $encoder "") (eq $field.Kind 11) -}} {{/* protoreflect.MessageKind */ -}}
        polyglot.Encoder(b).Slice(uint32(len(x.{{ CamelCaseName $field.Name }})), polyglot.AnyKind)
        for _, v := range x.{{CamelCaseName $field.Name}} {
            v.Encode(b)
        }
        {{else -}}
        polyglot.Encoder(b).Slice(uint32(len(x.{{ CamelCaseName $field.Name }})), {{ GetKindLUT $field.Kind }})
        for _, v := range x.{{ CamelCaseName $field.Name }} {
            polyglot.Encoder(b){{$encoder}}(v)
        }
        {{end -}}
    {{end -}}
{{end}}

{{define "encodeMessages"}}
    {{ range $field := .MessageFields -}}
        x.{{ CamelCaseName $field.Name }}.Encode(b)
    {{end -}}
{{end}}